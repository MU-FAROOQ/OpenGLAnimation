/* CS2150Coursework.java
 * TODO: put your university username and full name here
 *
 * Scene Graph:
 *  Scene origin
 *  |
 *
 *  TODO: Provide a scene graph for your submission
 */
package coursework.MuhammadUmarFarooq;

import org.lwjgl.opengl.GL11;
import org.lwjgl.util.glu.GLU;
import org.lwjgl.util.glu.Sphere;
import org.lwjgl.input.Keyboard;
import org.newdawn.slick.opengl.Texture;
import GraphicsLab.*;

/**
 * TODO: Briefly describe your submission here
 *
 * <p>Controls:
 * <ul>
 * <li>Press the escape key to exit the application.
 * <li>Hold the x, y and z keys to view the scene along the x, y and z axis, respectively
 * <li>While viewing the scene along the x, y or z axis, use the up and down cursor keys
 *      to increase or decrease the viewpoint's distance from the scene origin
 * </ul>
 * TODO: Add any additional controls for your sample to the list above
 *
 */
public class CS2150Coursework extends GraphicsLab
{
	public static final Colour ORANGE = new Colour(238,154,0);
	
    //display list id for plane
    private final int planeList = 1;
    //display list id for cube
    private final int cubeList = 2;
    //display list id for roof
    private final int roofList = 3;
    //display list id for door
    private final int doorList = 4;
    //display list id for windmill stand
    private final int windmillStandList = 5;
    //display list id for windmill stand
    private final int windmillBladesList = 6;
    //windmill spin
    private float windmillSpin = 1.0f;
    //windmillspin reached 1
    private boolean windmillComplete = false;
	
    /** ids for nearest, linear and mipmapped textures for the ground plane */
    private Texture grass;
    /** ids for nearest, linear and mipmapped textures for the back plane */
    private Texture sky;
    // store door texture
    private Texture door;
    
    //TODO: Feel free to change the window title and default animation scale here
    public static void main(String args[])
    {   new CS2150Coursework().run(WINDOWED,"CS2150 Coursework Submission",0.01f);
    }

    protected void initScene() throws Exception
    {//TODO: Initialise your resources here - might well call other methods you write.
    	// load the textures
        grass = loadTexture("coursework/MuhammadUmarFarooq/textures/grass.jpg");
        sky = loadTexture("coursework/MuhammadUmarFarooq/textures/starSky.jpg");
        door = loadTexture("coursework/MuhammadUmarFarooq/textures/doors.jpg");
        
    	// global ambient light level
        float globalAmbient[]   = {0.2f,  0.2f,  0.2f, 1.0f};
        // set the global ambient lighting
        GL11.glLightModel(GL11.GL_LIGHT_MODEL_AMBIENT,FloatBuffer.wrap(globalAmbient));

        // the first light for the scene is white...
        float diffuse0[]  = { 0.6f,  0.6f, 0.6f, 1.0f};
        // ...with a dim ambient contribution...
        float ambient0[]  = { 0.5f,  0.5f, 0.5f, 1.0f};
        // ...and is positioned above the viewpoint
        float position0[] = { 0.0f, 10.0f, 0.0f, 1.0f};
        
        // supply OpenGL with the properties for the first light
        GL11.glLight(GL11.GL_LIGHT0, GL11.GL_AMBIENT, FloatBuffer.wrap(ambient0));
        GL11.glLight(GL11.GL_LIGHT0, GL11.GL_DIFFUSE, FloatBuffer.wrap(diffuse0));
        GL11.glLight(GL11.GL_LIGHT0, GL11.GL_SPECULAR, FloatBuffer.wrap(diffuse0));
        GL11.glLight(GL11.GL_LIGHT0, GL11.GL_POSITION, FloatBuffer.wrap(position0));
        // enable the first light
        GL11.glEnable(GL11.GL_LIGHT0);

        // enable lighting calculations
        GL11.glEnable(GL11.GL_LIGHTING);
        // ensure that all normals are re-normalised after transformations automatically
        GL11.glEnable(GL11.GL_NORMALIZE);
        
    	GL11.glNewList(planeList, GL11.GL_COMPILE);
    	{
    		drawPlane();
    	}
    	GL11.glEndList();
    	GL11.glNewList(cubeList, GL11.GL_COMPILE);
    	{
    		drawUnitCube();
    	}
    	GL11.glEndList();
    	GL11.glNewList(roofList, GL11.GL_COMPILE);
    	{
    		drawUnitRoof();
    	}
    	GL11.glEndList();
    	GL11.glNewList(doorList, GL11.GL_COMPILE);
    	{
    		drawUnitDoor();
    	}
    	GL11.glEndList();
    	GL11.glNewList(windmillStandList, GL11.GL_COMPILE);
    	{
    		drawWindmillStand();
    	}
    	GL11.glEndList();
    	GL11.glNewList(windmillBladesList, GL11.GL_COMPILE);
    	{
    		drawWindmillBlades();
    	}
    	GL11.glEndList();
    }
    protected void checkSceneInput()
    {//TODO: Check for keyboard and mouse input here
    }
    protected void updateScene()
    {
        //TODO: Update your scene variables here - remember to use the current animation scale value
        //        (obtained via a call to getAnimationScale()) in your modifications so that your animations
        //        can be made faster or slower depending on the machine you are working on
    	
    	// increase windmillSpin
    	if(windmillSpin > -1.0f && !windmillComplete) {
    		windmillSpin -= 0.001;
    	}
    	else{
        	windmillSpin = 1.0f;
        	windmillSpin += 0.001;
        	windmillComplete = true;
        }
    	
    	System.out.println(windmillSpin);
    }
    protected void renderScene()
    {//TODO: Render your scene here - remember that a scene graph will help you write this method! 
     //      It will probably call a number of other methods you will write.

    	// draw the ground plane
        GL11.glPushMatrix();
        {
            // disable lighting calculations so that they don't affect
            // the appearance of the texture 
            GL11.glPushAttrib(GL11.GL_LIGHTING_BIT);
            GL11.glDisable(GL11.GL_LIGHTING);
            // change the geometry colour to white so that the texture
            // is bright and details can be seen clearly
            ORANGE.submit();
            // enable texturing and bind an appropriate texture
            GL11.glEnable(GL11.GL_TEXTURE_2D);
            GL11.glBindTexture(GL11.GL_TEXTURE_2D,grass.getTextureID());
            
            // position, scale and draw the ground plane using its display list
            GL11.glTranslatef(0.0f,-1.0f,-10.0f);
            GL11.glScalef(25.0f, 1.0f, 20.0f);
            GL11.glCallList(planeList);
            
            // disable textures and reset any local lighting changes
            GL11.glDisable(GL11.GL_TEXTURE_2D);
            GL11.glPopAttrib();
        }
        GL11.glPopMatrix();
        
        // draw the back plane
        GL11.glPushMatrix();
        {
            // disable lighting calculations so that they don't affect
            // the appearance of the texture 
            GL11.glPushAttrib(GL11.GL_LIGHTING_BIT);
            GL11.glDisable(GL11.GL_LIGHTING);
            // change the geometry colour to white so that the texture
            // is bright and details can be seen clearly
            Colour.WHITE.submit();
            // enable texturing and bind an appropriate texture
            GL11.glEnable(GL11.GL_TEXTURE_2D);
            GL11.glBindTexture(GL11.GL_TEXTURE_2D,sky.getTextureID());
            
            // position, scale and draw the back plane using its display list
            GL11.glTranslatef(0.0f,4.0f,-20.0f);
            GL11.glRotatef(90.0f, 1.0f, 0.0f, 0.0f);
            GL11.glScalef(25.0f, 1.0f, 10.0f);
            GL11.glCallList(planeList);
            
            // disable textures and reset any local lighting changes
            GL11.glDisable(GL11.GL_TEXTURE_2D);
            GL11.glPopAttrib();
        }
        GL11.glPopMatrix();
        
        // draw the barn, its roof and door
        GL11.glPushMatrix();
        {
            // position and scale the house
	        GL11.glTranslatef(3.0f, 0.0f, -10.0f);
	        GL11.glScalef(2.0f, 2.0f, 2.0f);
	        // rotate the house a little so that we can see more of it
	        GL11.glRotatef(40.0f, 0.0f, 1.0f, 0.0f);
	        
	        // how shiny are the front faces of the house (specular exponent)
	        float houseFrontShininess  = 2.0f;
	        // specular reflection of the front faces of the house
	        float houseFrontSpecular[] = {0.1f, 0.0f, 0.0f, 1.0f};
	        // diffuse reflection of the front faces of the house
	        float houseFrontDiffuse[]  = {0.6f, 0.2f, 0.2f, 1.0f};
	        
	        // set the material properties for the house using OpenGL
	        GL11.glMaterialf(GL11.GL_FRONT, GL11.GL_SHININESS, houseFrontShininess);
	        GL11.glMaterial(GL11.GL_FRONT, GL11.GL_SPECULAR, FloatBuffer.wrap(houseFrontSpecular));
	        GL11.glMaterial(GL11.GL_FRONT, GL11.GL_DIFFUSE, FloatBuffer.wrap(houseFrontDiffuse));

	        // draw the base of the house using its display list
	        GL11.glCallList(cubeList);
	        
	        // position and scale the house's roof relative to the base of the house
	        GL11.glTranslatef(0.0f, 0.75f, 0.0f);
	        GL11.glScalef(1.0f, 0.5f, 1.0f);
	        
	        // how shiny are the front faces of the roof (specular exponent)
	        float roofFrontShininess = 2.0f;
	        // specular reflection of the front faces of the roof
	        float roofFrontSpecular[] = {0.1f, 0.1f, 0.1f, 1.0f};
	        // diffuse reflection of the front faces of the roof
	        float roofFrontDiffuse[] = {0.2f, 0.2f, 0.2f, 1.0f};
	        
            // Set the material properties for the house using OpenGL
            GL11.glMaterialf(GL11.GL_FRONT, GL11.GL_SHININESS, roofFrontShininess);
            GL11.glMaterial(GL11.GL_FRONT, GL11.GL_SPECULAR, FloatBuffer.wrap(roofFrontSpecular));
            GL11.glMaterial(GL11.GL_FRONT, GL11.GL_DIFFUSE, FloatBuffer.wrap(roofFrontDiffuse));

            // draw the roof using its display list
            GL11.glCallList(roofList);
            
            // disable lighting calculations so that they don't affect
            // the appearance of the texture 
            GL11.glPushAttrib(GL11.GL_LIGHTING_BIT);
            // change the geometry colour to white so that the texture
            // is bright and details can be seen clearly
            Colour.WHITE.submit();
            // enable texturing and bind an appropriate texture
            GL11.glEnable(GL11.GL_TEXTURE_2D);
            GL11.glBindTexture(GL11.GL_TEXTURE_2D,door.getTextureID());
            
            // pos/scale house door
            GL11.glTranslatef(-0.5001f, -1.5f, -0.28f);
            GL11.glRotatef(-90, 0.0f, 1.0f, 0.0f);
            GL11.glScalef(3f, 2f, 1.5f);
            
            //how shiny are the front faces of the door
            float doorFrontShininess = 2.0f;
            //specular reflection of the front faces of the door
            float doorFrontSpecular[] = {0.6f,0.6f,0.6f,1.0f};
            //diffuse reflection of the front faces of the door
            float doorFrontDiffuse[] = {0.4f,0.4f,0.4f,1.0f};
            
            //set material properties of the door
            GL11.glMaterialf(GL11.GL_FRONT, GL11.GL_SHININESS, doorFrontShininess);
            GL11.glMaterial(GL11.GL_FRONT, GL11.GL_SPECULAR, FloatBuffer.wrap(doorFrontSpecular));
            GL11.glMaterial(GL11.GL_FRONT, GL11.GL_DIFFUSE, FloatBuffer.wrap(doorFrontDiffuse));
            GL11.glMaterial(GL11.GL_FRONT, GL11.GL_AMBIENT, FloatBuffer.wrap(doorFrontDiffuse));
            
            //draw door using its display list
            GL11.glCallList(doorList);
            
            GL11.glPopAttrib();
        }
        GL11.glPopMatrix();
        
        // draw the moon
        GL11.glPushMatrix();
        {
        	GL11.glPushAttrib(GL11.GL_COLOR_MATERIAL);
            // how shiny are the front faces of the moon (specular exponent)
            float moonFrontShininess  = 2.0f;
            // specular reflection of the front faces of the moon
            float moonFrontSpecular[] = {0.5f, 0.5f, 0.5f, 1.0f};
            // diffuse reflection of the front faces of the moon
            float moonFrontDiffuse[]  = {0.6f, 0.6f, 0.6f, 1.0f};
            float moonFrontEmission[]  = {0.3f, 0.3f, 0.3f, 1.0f};
            
            // set the material properties for the moon using OpenGL
            GL11.glMaterialf(GL11.GL_FRONT, GL11.GL_SHININESS, moonFrontShininess);
            GL11.glMaterial(GL11.GL_FRONT, GL11.GL_SPECULAR, FloatBuffer.wrap(moonFrontSpecular));
            GL11.glMaterial(GL11.GL_FRONT, GL11.GL_DIFFUSE, FloatBuffer.wrap(moonFrontDiffuse));
            GL11.glMaterial(GL11.GL_FRONT, GL11.GL_EMISSION, FloatBuffer.wrap(moonFrontEmission));
            
            // position and draw the moon using a sphere quadric object
            GL11.glTranslatef(4.0f, 6.0f, -19.0f);
            GL11.glScalef(0.8f, 0.8f, 0.8f);
            new Sphere().draw(1.0f,25,25);
            
            GL11.glPopAttrib();
        }
        GL11.glPopMatrix();
        
        GL11.glPushMatrix();
        {
        	GL11.glPushAttrib(GL11.GL_LIGHTING_BIT);
            // pos/scale windmill stand
        	GL11.glTranslatef(-3.0f, -1.5f, -10.0f);
            GL11.glScalef(2f, 3f, 2f);
            GL11.glRotatef(10, 0.0f, 1.0f, 0.0f);
            
            //how shiny are the front faces of the door
            float windmillStandFrontShininess = 2.0f;
            //specular reflection of the front faces of the door
            float windmillStandFrontSpecular[] = {0.5f,0.4f,0.3f,1.0f};
            //diffuse reflection of the front faces of the door
            float windmillStandFrontDiffuse[] = {0.4f,0.4f,0.4f,1.0f};
            
            //set material properties of the door
            GL11.glMaterialf(GL11.GL_FRONT, GL11.GL_SHININESS, windmillStandFrontShininess);
            GL11.glMaterial(GL11.GL_FRONT, GL11.GL_SPECULAR, FloatBuffer.wrap(windmillStandFrontSpecular));
            GL11.glMaterial(GL11.GL_FRONT, GL11.GL_DIFFUSE, FloatBuffer.wrap(windmillStandFrontDiffuse));
            GL11.glMaterial(GL11.GL_FRONT, GL11.GL_AMBIENT, FloatBuffer.wrap(windmillStandFrontDiffuse));
            
            GL11.glCallList(windmillStandList);
            
            GL11.glPopAttrib();
        }
        GL11.glPopMatrix();
        
        GL11.glPushMatrix();
        {
        	GL11.glPushAttrib(GL11.GL_LIGHTING_BIT);
        	
            // pos/scale windmill stand
        	GL11.glTranslatef(-2.57f, 1.3f, -9.0f);
            GL11.glScalef(1.5f, 1.5f, 1.5f);
            GL11.glRotatef(10, 0.0f, 1.0f, windmillSpin);
            
         // rotate the Earth around the Sun
            //GL11.glRotatef((360.0f*windmillSpin/365.0f),0.0f,1.0f,2.0f);
            
            //how shiny are the front faces of the door
            float windmillBladesFrontShininess = 2.0f;
            //specular reflection of the front faces of the door
            float windmillBladesFrontSpecular[] = {0.5f,0.4f,0.3f,1.0f};
            //diffuse reflection of the front faces of the door
            float windmillBladesFrontDiffuse[] = {0.4f,0.4f,0.4f,1.0f};
            
            //set material properties of the door
            GL11.glMaterialf(GL11.GL_FRONT, GL11.GL_SHININESS, windmillBladesFrontShininess);
            GL11.glMaterial(GL11.GL_FRONT, GL11.GL_SPECULAR, FloatBuffer.wrap(windmillBladesFrontSpecular));
            GL11.glMaterial(GL11.GL_FRONT, GL11.GL_DIFFUSE, FloatBuffer.wrap(windmillBladesFrontDiffuse));
            GL11.glMaterial(GL11.GL_FRONT, GL11.GL_AMBIENT, FloatBuffer.wrap(windmillBladesFrontDiffuse));
            
            GL11.glCallList(windmillBladesList);
            
            GL11.glPopAttrib();
        }
        GL11.glPopMatrix();
    }
    protected void setSceneCamera()
    {
        // call the default behaviour defined in GraphicsLab. This will set a default perspective projection
        // and default camera settings ready for some custom camera positioning below...  
        super.setSceneCamera();

        //TODO: If it is appropriate for your scene, modify the camera's position and orientation here
        //        using a call to GL11.gluLookAt(...)
   }

    protected void cleanupScene()
    {//TODO: Clean up your resources here
    }

    /**
     * Draws a plane aligned with the X and Z axis, with its front face toward positive Y.
     *  The plane is of unit width and height, and uses the current OpenGL material settings
     *  for its appearance
     */
    private void drawPlane()
    {
        Vertex v1 = new Vertex(-0.5f, 0.0f,-0.5f); // left,  back
        Vertex v2 = new Vertex( 0.5f, 0.0f,-0.5f); // right, back
        Vertex v3 = new Vertex( 0.5f, 0.0f, 0.5f); // right, front
        Vertex v4 = new Vertex(-0.5f, 0.0f, 0.5f); // left,  front
        
        // draw the plane geometry. order the vertices so that the plane faces up
        GL11.glBegin(GL11.GL_POLYGON);
        {
            new Normal(v4.toVector(),v3.toVector(),v2.toVector(),v1.toVector()).submit();
            
            GL11.glTexCoord2f(0.0f,0.0f);
            v4.submit();
            
            GL11.glTexCoord2f(6.0f,0.0f);
            v3.submit();
            
            GL11.glTexCoord2f(6.0f,4.0f);
            v2.submit();
            
            GL11.glTexCoord2f(0.0f,4.0f);
            v1.submit();
        }
        GL11.glEnd();
        
        // if the user is viewing an axis, then also draw this plane
        // using lines so that axis aligned planes can still be seen
        if(isViewingAxis())
        {
            // also disable textures when drawing as lines
            // so that the lines can be seen more clearly
            GL11.glPushAttrib(GL11.GL_TEXTURE_2D);
            GL11.glDisable(GL11.GL_TEXTURE_2D);
            GL11.glBegin(GL11.GL_LINE_LOOP);
            {
                v3.submit();
                v2.submit();
                v1.submit();
            }
            GL11.glEnd();
            GL11.glPopAttrib();
        }
    }
    
    /**
     * Draws a roof geometry of unit length, width and height aligned along the x axis.
     * The roof uses the current OpenGL material settings for its appearance
     */
    private void drawUnitRoof()
    {
        Vertex v1 = new Vertex(-0.5f,-0.5f,-0.5f);
        Vertex v2 = new Vertex(-0.5f, 0.5f, 0.0f);
        Vertex v3 = new Vertex(-0.5f,-0.5f, 0.5f);
        Vertex v4 = new Vertex( 0.5f,-0.5f,-0.5f);
        Vertex v5 = new Vertex( 0.5f, 0.5f, 0.0f);
        Vertex v6 = new Vertex( 0.5f,-0.5f, 0.5f);
        
        // left gable
        GL11.glBegin(GL11.GL_TRIANGLES);
        {
            new Normal(v3.toVector(),v2.toVector(),v1.toVector()).submit();
            
            v3.submit();
            v2.submit();
            v1.submit();
        }
        GL11.glEnd();
        
        // back slope
        GL11.glBegin(GL11.GL_POLYGON);
        {
            new Normal(v1.toVector(),v2.toVector(),v5.toVector(),v4.toVector()).submit();
            
            v1.submit();
            v2.submit();
            v5.submit();
            v4.submit();
        }
        GL11.glEnd();
        
        // front slope
        GL11.glBegin(GL11.GL_POLYGON);
        {
            new Normal(v5.toVector(),v2.toVector(),v3.toVector(),v6.toVector()).submit();
            
            v5.submit();
            v2.submit();
            v3.submit();
            v6.submit();
        }
        GL11.glEnd();
        
        // right gable
        GL11.glBegin(GL11.GL_TRIANGLES);
        {
            new Normal(v5.toVector(),v6.toVector(),v4.toVector()).submit();
            
            v5.submit();
            v6.submit();
            v4.submit();
        }
        GL11.glEnd();
    }
    /**
     * Draws a cube of unit length, width and height using the current OpenGL material settings
     */
    private void drawUnitCube()
    {
        // the vertices for the cube (note that all sides have a length of 1)
        Vertex v1 = new Vertex(-0.5f, -0.5f,  0.5f);
        Vertex v2 = new Vertex(-0.5f,  0.5f,  0.5f);
        Vertex v3 = new Vertex( 0.5f,  0.5f,  0.5f);
        Vertex v4 = new Vertex( 0.5f, -0.5f,  0.5f);
        Vertex v5 = new Vertex(-0.5f, -0.5f, -0.5f);
        Vertex v6 = new Vertex(-0.5f,  0.5f, -0.5f);
        Vertex v7 = new Vertex( 0.5f,  0.5f, -0.5f);
        Vertex v8 = new Vertex( 0.5f, -0.5f, -0.5f);

        // draw the near face:
        GL11.glBegin(GL11.GL_POLYGON);
        {
            new Normal(v3.toVector(),v2.toVector(),v1.toVector(),v4.toVector()).submit();
            
            v3.submit();
            v2.submit();
            v1.submit();
            v4.submit();
        }
        GL11.glEnd();

        // draw the left face:
        GL11.glBegin(GL11.GL_POLYGON);
        {
            new Normal(v2.toVector(),v6.toVector(),v5.toVector(),v1.toVector()).submit();
            
            v2.submit();
            v6.submit();
            v5.submit();
            v1.submit();
        }
        GL11.glEnd();

        // draw the right face:
        GL11.glBegin(GL11.GL_POLYGON);
        {
            new Normal(v7.toVector(),v3.toVector(),v4.toVector(),v8.toVector()).submit();
            
            v7.submit();
            v3.submit();
            v4.submit();
            v8.submit();
        }
        GL11.glEnd();

        // draw the top face:
        GL11.glBegin(GL11.GL_POLYGON);
        {
            new Normal(v7.toVector(),v6.toVector(),v2.toVector(),v3.toVector()).submit();
            
            v7.submit();
            v6.submit();
            v2.submit();
            v3.submit();
        }
        GL11.glEnd();

        // draw the bottom face:
        GL11.glBegin(GL11.GL_POLYGON);
        {
            new Normal(v4.toVector(),v1.toVector(),v5.toVector(),v8.toVector()).submit();
            
            v4.submit();
            v1.submit();
            v5.submit();
            v8.submit();
        }
        GL11.glEnd();

        // draw the far face:
        GL11.glBegin(GL11.GL_POLYGON);
        {
            new Normal(v6.toVector(),v7.toVector(),v8.toVector(),v5.toVector()).submit();
            
            v6.submit();
            v7.submit();
            v8.submit();
            v5.submit();
        }
        GL11.glEnd();
    }
    
    private void drawUnitDoor() {
	 	Vertex v1 = new Vertex(0.0f, -0.5f, 0.0f);
	 	Vertex v2 = new Vertex(0.0f, 0.1f, 0.0f);
	 	Vertex v3 = new Vertex(0.2f, 0.1f, 0.0f);
	 	Vertex v4 = new Vertex(0.2f, -0.5f, 0.0f);
	 	
	 	GL11.glBegin(GL11.GL_POLYGON);
	 	{
	 		new Normal(v4.toVector(), v3.toVector(), v2.toVector(), v1.toVector()).submit();
	 		
	 		GL11.glTexCoord2f(0.0f,0.0f);
	 		v4.submit();
	 		GL11.glTexCoord2f(1.0f,0.0f);
	 		v3.submit();
	 		GL11.glTexCoord2f(1.0f,1.0f);
	 		v2.submit();
	 		GL11.glTexCoord2f(0.0f,1.0f);
	 		v1.submit();
	 	}
	 	GL11.glEnd();
    }
    
    private void drawWindmillStand() {
    	Vertex v1 = new Vertex(0.0f, 0.0f, 0.6f);
    	Vertex v2 = new Vertex(0.1f, 1.0f, 0.3f);
    	Vertex v3 = new Vertex(0.2f, 0.0f, 0.6f);
    	Vertex v4 = new Vertex(-0.2f, 0.2f, 0.0f);
    	Vertex v5 = new Vertex(0.0f, 0.2f, 0.0f);
    	Vertex v6 = new Vertex(0.2f, 0.2f, 0.0f);
    	Vertex v7 = new Vertex(0.4f, 0.2f, 0.0f);
    	
    	GL11.glBegin(GL11.GL_TRIANGLES);
    	{
    		new Normal(v3.toVector(), v2.toVector(), v1.toVector()).submit();
    		
    		v3.submit();
    		v2.submit();
    		v1.submit();
    	}
    	GL11.glEnd();
    	
    	GL11.glBegin(GL11.GL_TRIANGLES);
    	{
    		new Normal(v7.toVector(), v2.toVector(), v6.toVector()).submit();
    		
    		v7.submit();
    		v2.submit();
    		v6.submit();
    	}
    	GL11.glEnd();
    	
    	GL11.glBegin(GL11.GL_TRIANGLES);
    	{
    		new Normal(v5.toVector(), v2.toVector(), v4.toVector()).submit();
    		
    		v5.submit();
    		v2.submit();
    		v4.submit();
    	}
    	GL11.glEnd();
    }
    
    private void drawWindmillBlades() {
    	Vertex v1 = new Vertex(-0.1f, 0.1f, 0.0f);
    	Vertex v2 = new Vertex(-0.3f, 0.5f, 0.2f);
    	Vertex v3 = new Vertex(0.3f, 0.5f, 0.2f);
    	Vertex v4 = new Vertex(0.1f, 0.1f, 0.0f);
    	Vertex v5 = new Vertex(0.5f, 0.3f, 0.2f);
    	Vertex v6 = new Vertex(0.5f, -0.3f, 0.2f);
    	Vertex v7 = new Vertex(0.1f, -0.1f, 0.0f);
    	Vertex v8 = new Vertex(0.3f, -0.5f, 0.2f);
    	Vertex v9 = new Vertex(-0.3f, -0.5f, 0.2f);
    	Vertex v10 = new Vertex(-0.1f, -0.1f, 0.0f);
    	Vertex v11 = new Vertex(-0.5f, -0.3f, 0.2f);
    	Vertex v12 = new Vertex(-0.5f, 0.3f, 0.2f);
    	
    	GL11.glBegin(GL11.GL_POLYGON);
    	{
    		new Normal(v4.toVector(), v3.toVector(), v2.toVector(), v1.toVector()).submit();
    		
    		v4.submit();
    		v3.submit();
    		v2.submit();
    		v1.submit();
    	}
    	GL11.glEnd();
    	
    	GL11.glBegin(GL11.GL_POLYGON);
    	{
    		new Normal(v6.toVector(), v5.toVector(), v4.toVector(), v7.toVector()).submit();
    			
    		v6.submit();
    		v5.submit();
    		v4.submit();
    		v7.submit();
    	}
    	GL11.glEnd();
    	
    	GL11.glBegin(GL11.GL_POLYGON);
    	{
    		new Normal(v8.toVector(), v7.toVector(), v10.toVector(), v9.toVector()).submit();
    		
    		v8.submit();
    		v7.submit();
    		v10.submit();
    		v9.submit();
    	}
    	GL11.glEnd();
    	GL11.glBegin(GL11.GL_POLYGON);
    	{
    		new Normal(v10.toVector(), v1.toVector(), v12.toVector(), v11.toVector()).submit();
    		
    		v10.submit();
    		v1.submit();
    		v12.submit();
    		v11.submit();
    	}
    	GL11.glEnd();
    	GL11.glBegin(GL11.GL_POLYGON);
    	{
    		new Normal(v7.toVector(), v4.toVector(), v1.toVector(), v10.toVector()).submit();
    		
    		v7.submit();
    		v4.submit();
    		v1.submit();
    		v10.submit();
    	}
    	GL11.glEnd();
    }
}
